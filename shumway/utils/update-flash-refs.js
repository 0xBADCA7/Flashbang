/* -*- Mode: js; js-indent-level: 2; indent-tabs-mode: nil; tab-width: 2 -*- */
/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */
/*
 * Copyright 2013 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var fs = require('fs');
var path = require('path');

function listJSFiles(dir, prefix, output, includeRootFiles) {
  var files = fs.readdirSync(dir);
  for (var i = 0; i < files.length; i++) {
    var file = files[i];
    var s = fs.statSync(path.join(dir, file));
    if (s.isDirectory()) {
      listJSFiles(path.join(dir, file), prefix + file + '/', output);
    } else if (s.isFile() && /\.js$/i.test(file) &&
               (includeRootFiles || prefix != '')) {
      output.push(prefix + file);
    }
  }
}

function updateLibRefs(filePath, flashDir, libname, includeRootFiles) {
  var content = fs.readFileSync(filePath, 'utf8');
  var m = new RegExp('\\n([\\t\\u0020]+)<!-- Autogenerated ' + libname + ' references: base=(\\S+)').exec(content);
  if (!m) {
    throw new Error(filePath + ' has no ' + libname + ' references');
  }

  var baseUrl = m[2], indent = m[1];
  var lineStart = indent + '<script src="' + baseUrl;
  var lineEnd = '"></script>';

  var list = [];
  listJSFiles(flashDir, '', list, includeRootFiles);
  list.sort(function (a, b) {
    return a.toLowerCase() < b.toLowerCase() ? -1 : 1;
  });

  content = content.replace(new RegExp('(Autogenerated ' + libname + ' references:.*?\\n)[\\S\\s]*?(\\n\\s+<!-- Autogenerated ' + libname + ' references end)'),
    function (all, head, tail) {
      return head + lineStart + list.join(lineEnd + '\n' + lineStart) + lineEnd + tail;
    }
  );

  fs.writeFileSync(filePath, content, 'utf8');
}

function updateFlashRefs(filePath, srcDir) {
  updateLibRefs(filePath, srcDir + '/flash', 'flash', false);
  updateLibRefs(filePath, srcDir + '/avm1lib', 'avm1lib', true);
}

module.exports = updateFlashRefs;
